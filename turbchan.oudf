// Boundary conditions

void scalarDirichletConditions(bcData *bc){
  if (bc->y >= 0){
    bc->s = 1.0 + 0.75;
//    bc->s = 1.0 + 0.75*0.5*(tanhf(3*(bc->time - 1.0))+1.0);
  }
  if (bc->y <  0) bc->s = 1.0;
}

// Stabilized outflow (Dong et al)

// computes:
// V1:   mu du1/dx1,  mu du1/dx2,  mu du1/dx3
// V2:   mu du2/dx1,  mu du2/dx2,  mu du2/dx3
// V3:   mu du3/dx1,  mu du3/dx2,  mu du3/dx3
@kernel void stressTensor(const dlong Nelements,
                                    @restrict const dfloat*  vgeo,
                                    @restrict const dfloat*  D,
                                    const dlong offset,
                                    @restrict const dfloat*  viscosity,
                                    @restrict const dfloat*  invLMM,
                                    @restrict const dfloat*  U,
                                    @restrict dfloat*  stress)
{
  for(dlong e = 0; e < Nelements; e++; @outer(0)) { // for all elements
    @shared dfloat s_U[p_Nq][p_Nq];
    @exclusive dfloat s_Uloc[p_Nq];

    @shared dfloat s_V[p_Nq][p_Nq];
    @exclusive dfloat s_Vloc[p_Nq];

    @shared dfloat s_W[p_Nq][p_Nq];
    @exclusive dfloat s_Wloc[p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

#ifdef smXX
    #pragma unroll p_Nq
#endif
    for(int k = 0; k < p_Nq; ++k){
      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          s_U[j][i]  = U[id + 0 * offset];
          s_V[j][i]  = U[id + 1 * offset];
          s_W[j][i]  = U[id + 2 * offset];

          if (k == 0)
            s_D[j][i] = D[j * p_Nq + i];
          if(k == 0){
            #pragma unroll p_Nq
            for(int l = 0 ; l < p_Nq; ++l){
              const dlong other_id = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              s_Uloc[l] = U[other_id + 0 * offset];
              s_Vloc[l] = U[other_id + 1 * offset];
              s_Wloc[l] = U[other_id + 2 * offset];
            }
          }
        }
      }


    // Make sure all node data is loaded into @shared
    @barrier("local");
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID * p_Np];
          const dfloat JW   = vgeo[gid + p_JWID * p_Np];

          dfloat dUdr  = 0.f, dUds  = 0.f, dUdt  = 0.f;
          dfloat dVdr  = 0.f, dVds  = 0.f, dVdt  = 0.f;
          dfloat dWdr  = 0.f, dWds  = 0.f, dWdt  = 0.f;

#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];

            dUdr += Dr * s_U[j][n];
            dUds += Ds * s_U[n][i];
            dUdt += Dt * s_Uloc[n];

            dVdr += Dr * s_V[j][n];
            dVds += Ds * s_V[n][i];
            dVdt += Dt * s_Vloc[n];

            dWdr += Dr * s_W[j][n];
            dWds += Ds * s_W[n][i];
            dWdt += Dt * s_Wloc[n];
          }

          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat invMass = invLMM[id];
          const dfloat mu = viscosity[id];
          const dfloat multiplier = invMass * JW * mu;
          stress[id + 0 * offset] = multiplier * (drdx * dUdr + dsdx * dUds + dtdx * dUdt);
          stress[id + 1 * offset] = multiplier * (drdy * dUdr + dsdy * dUds + dtdy * dUdt);
          stress[id + 2 * offset] = multiplier * (drdz * dUdr + dsdz * dUds + dtdz * dUdt);

          stress[id + 3 * offset] = multiplier * (drdx * dVdr + dsdx * dVds + dtdx * dVdt);
          stress[id + 4 * offset] = multiplier * (drdy * dVdr + dsdy * dVds + dtdy * dVdt);
          stress[id + 5 * offset] = multiplier * (drdz * dVdr + dsdz * dVds + dtdz * dVdt);

          stress[id + 6 * offset] = multiplier * (drdx * dWdr + dsdx * dWds + dtdx * dWdt);
          stress[id + 7 * offset] = multiplier * (drdy * dWdr + dsdy * dWds + dtdy * dWdt);
          stress[id + 8 * offset] = multiplier * (drdz * dWdr + dsdz * dWds + dtdz * dWdt);
        }
      }
      @barrier("local");
    } // k-loop
  }
}


@kernel void userVp(const dlong Nelements,
                    const dlong uOffset,
                    const dlong sOffset,
                    const dfloat visc,
                    const dfloat cond,
                    @restrict const dfloat * TEMP,
                    @restrict dfloat * UPROP,
                    @restrict dfloat * SPROP)
{
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){
      const int id = e*p_Np + n;
      UPROP[id + 0*uOffset] = visc * (1.0+(TEMP[id] - 1.0)*(0.75127) );
      SPROP[id + 0*sOffset] = cond * (1.0+(TEMP[id] - 1.0)*(0.8326) );

//      UPROP[id + 0*uOffset] = 1.0 * visc;
//      SPROP[id + 0*sOffset] = 1.0 * cond;

//      UPROP[id + 1*uOffset] = 1.0;
//      SPROP[id + 1*sOffset] = 1.0;
      UPROP[id + 1*uOffset] = 1.0/TEMP[id];
      SPROP[id + 1*sOffset] = 1.0/TEMP[id];
    }
  }
}
